/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 84710.0, "series": [{"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 2.0], [0.9, 2.0], [1.0, 2.0], [1.1, 2.0], [1.2, 2.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 3.0], [1.7, 3.0], [1.8, 3.0], [1.9, 3.0], [2.0, 3.0], [2.1, 3.0], [2.2, 3.0], [2.3, 3.0], [2.4, 3.0], [2.5, 3.0], [2.6, 3.0], [2.7, 3.0], [2.8, 3.0], [2.9, 3.0], [3.0, 3.0], [3.1, 3.0], [3.2, 4.0], [3.3, 4.0], [3.4, 4.0], [3.5, 4.0], [3.6, 4.0], [3.7, 4.0], [3.8, 4.0], [3.9, 4.0], [4.0, 4.0], [4.1, 4.0], [4.2, 4.0], [4.3, 4.0], [4.4, 4.0], [4.5, 4.0], [4.6, 4.0], [4.7, 4.0], [4.8, 4.0], [4.9, 4.0], [5.0, 4.0], [5.1, 4.0], [5.2, 5.0], [5.3, 5.0], [5.4, 5.0], [5.5, 5.0], [5.6, 5.0], [5.7, 5.0], [5.8, 5.0], [5.9, 5.0], [6.0, 5.0], [6.1, 5.0], [6.2, 5.0], [6.3, 5.0], [6.4, 5.0], [6.5, 5.0], [6.6, 5.0], [6.7, 5.0], [6.8, 5.0], [6.9, 5.0], [7.0, 5.0], [7.1, 5.0], [7.2, 5.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 7.0], [9.2, 7.0], [9.3, 7.0], [9.4, 7.0], [9.5, 7.0], [9.6, 7.0], [9.7, 7.0], [9.8, 7.0], [9.9, 7.0], [10.0, 7.0], [10.1, 7.0], [10.2, 7.0], [10.3, 7.0], [10.4, 7.0], [10.5, 7.0], [10.6, 7.0], [10.7, 7.0], [10.8, 8.0], [10.9, 8.0], [11.0, 8.0], [11.1, 8.0], [11.2, 8.0], [11.3, 8.0], [11.4, 8.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 9.0], [12.3, 9.0], [12.4, 9.0], [12.5, 9.0], [12.6, 9.0], [12.7, 9.0], [12.8, 9.0], [12.9, 9.0], [13.0, 9.0], [13.1, 9.0], [13.2, 9.0], [13.3, 9.0], [13.4, 10.0], [13.5, 10.0], [13.6, 10.0], [13.7, 10.0], [13.8, 10.0], [13.9, 10.0], [14.0, 10.0], [14.1, 10.0], [14.2, 10.0], [14.3, 10.0], [14.4, 11.0], [14.5, 11.0], [14.6, 11.0], [14.7, 11.0], [14.8, 11.0], [14.9, 11.0], [15.0, 11.0], [15.1, 11.0], [15.2, 11.0], [15.3, 11.0], [15.4, 12.0], [15.5, 12.0], [15.6, 12.0], [15.7, 12.0], [15.8, 12.0], [15.9, 12.0], [16.0, 12.0], [16.1, 12.0], [16.2, 13.0], [16.3, 13.0], [16.4, 13.0], [16.5, 13.0], [16.6, 13.0], [16.7, 13.0], [16.8, 14.0], [16.9, 14.0], [17.0, 14.0], [17.1, 14.0], [17.2, 14.0], [17.3, 14.0], [17.4, 15.0], [17.5, 15.0], [17.6, 15.0], [17.7, 15.0], [17.8, 15.0], [17.9, 16.0], [18.0, 16.0], [18.1, 16.0], [18.2, 16.0], [18.3, 17.0], [18.4, 17.0], [18.5, 17.0], [18.6, 17.0], [18.7, 17.0], [18.8, 18.0], [18.9, 18.0], [19.0, 18.0], [19.1, 18.0], [19.2, 18.0], [19.3, 19.0], [19.4, 19.0], [19.5, 19.0], [19.6, 19.0], [19.7, 20.0], [19.8, 20.0], [19.9, 20.0], [20.0, 20.0], [20.1, 20.0], [20.2, 21.0], [20.3, 21.0], [20.4, 21.0], [20.5, 21.0], [20.6, 21.0], [20.7, 22.0], [20.8, 22.0], [20.9, 22.0], [21.0, 23.0], [21.1, 23.0], [21.2, 23.0], [21.3, 24.0], [21.4, 24.0], [21.5, 24.0], [21.6, 24.0], [21.7, 25.0], [21.8, 25.0], [21.9, 25.0], [22.0, 25.0], [22.1, 26.0], [22.2, 26.0], [22.3, 26.0], [22.4, 26.0], [22.5, 27.0], [22.6, 27.0], [22.7, 27.0], [22.8, 28.0], [22.9, 28.0], [23.0, 28.0], [23.1, 29.0], [23.2, 29.0], [23.3, 29.0], [23.4, 30.0], [23.5, 30.0], [23.6, 30.0], [23.7, 30.0], [23.8, 31.0], [23.9, 31.0], [24.0, 31.0], [24.1, 32.0], [24.2, 32.0], [24.3, 32.0], [24.4, 33.0], [24.5, 33.0], [24.6, 34.0], [24.7, 34.0], [24.8, 35.0], [24.9, 35.0], [25.0, 36.0], [25.1, 36.0], [25.2, 37.0], [25.3, 37.0], [25.4, 38.0], [25.5, 38.0], [25.6, 39.0], [25.7, 40.0], [25.8, 40.0], [25.9, 41.0], [26.0, 41.0], [26.1, 42.0], [26.2, 42.0], [26.3, 43.0], [26.4, 43.0], [26.5, 44.0], [26.6, 44.0], [26.7, 45.0], [26.8, 45.0], [26.9, 46.0], [27.0, 47.0], [27.1, 47.0], [27.2, 48.0], [27.3, 48.0], [27.4, 49.0], [27.5, 49.0], [27.6, 50.0], [27.7, 50.0], [27.8, 51.0], [27.9, 52.0], [28.0, 53.0], [28.1, 53.0], [28.2, 54.0], [28.3, 55.0], [28.4, 55.0], [28.5, 56.0], [28.6, 57.0], [28.7, 57.0], [28.8, 58.0], [28.9, 59.0], [29.0, 60.0], [29.1, 61.0], [29.2, 62.0], [29.3, 63.0], [29.4, 64.0], [29.5, 65.0], [29.6, 66.0], [29.7, 67.0], [29.8, 69.0], [29.9, 70.0], [30.0, 71.0], [30.1, 73.0], [30.2, 75.0], [30.3, 76.0], [30.4, 79.0], [30.5, 82.0], [30.6, 87.0], [30.7, 118.0], [30.8, 797.0], [30.9, 832.0], [31.0, 861.0], [31.1, 921.0], [31.2, 996.0], [31.3, 1048.0], [31.4, 1089.0], [31.5, 1121.0], [31.6, 1170.0], [31.7, 1239.0], [31.8, 1351.0], [31.9, 1459.0], [32.0, 1577.0], [32.1, 1733.0], [32.2, 1957.0], [32.3, 2121.0], [32.4, 2252.0], [32.5, 2397.0], [32.6, 2525.0], [32.7, 2642.0], [32.8, 2674.0], [32.9, 2926.0], [33.0, 3266.0], [33.1, 3294.0], [33.2, 3450.0], [33.3, 3499.0], [33.4, 3533.0], [33.5, 3546.0], [33.6, 3742.0], [33.7, 3745.0], [33.8, 3851.0], [33.9, 3863.0], [34.0, 4076.0], [34.1, 4102.0], [34.2, 4327.0], [34.3, 4371.0], [34.4, 4463.0], [34.5, 4480.0], [34.6, 4483.0], [34.7, 4617.0], [34.8, 4623.0], [34.9, 4631.0], [35.0, 4670.0], [35.1, 4677.0], [35.2, 4695.0], [35.3, 4814.0], [35.4, 4836.0], [35.5, 4927.0], [35.6, 4982.0], [35.7, 5202.0], [35.8, 5203.0], [35.9, 5216.0], [36.0, 5456.0], [36.1, 5466.0], [36.2, 5481.0], [36.3, 5492.0], [36.4, 5518.0], [36.5, 5603.0], [36.6, 5611.0], [36.7, 5712.0], [36.8, 5725.0], [36.9, 5762.0], [37.0, 5795.0], [37.1, 5820.0], [37.2, 5835.0], [37.3, 5892.0], [37.4, 5901.0], [37.5, 5909.0], [37.6, 5915.0], [37.7, 5967.0], [37.8, 6051.0], [37.9, 6064.0], [38.0, 6084.0], [38.1, 6192.0], [38.2, 6201.0], [38.3, 6218.0], [38.4, 6247.0], [38.5, 6256.0], [38.6, 6259.0], [38.7, 6281.0], [38.8, 6325.0], [38.9, 6365.0], [39.0, 6427.0], [39.1, 6639.0], [39.2, 6681.0], [39.3, 6756.0], [39.4, 6831.0], [39.5, 6879.0], [39.6, 6949.0], [39.7, 6969.0], [39.8, 6977.0], [39.9, 7009.0], [40.0, 7095.0], [40.1, 7177.0], [40.2, 7203.0], [40.3, 7214.0], [40.4, 7230.0], [40.5, 7234.0], [40.6, 7245.0], [40.7, 7249.0], [40.8, 7255.0], [40.9, 7258.0], [41.0, 7267.0], [41.1, 7405.0], [41.2, 7466.0], [41.3, 7511.0], [41.4, 7519.0], [41.5, 7592.0], [41.6, 7611.0], [41.7, 7628.0], [41.8, 7640.0], [41.9, 7648.0], [42.0, 7652.0], [42.1, 7677.0], [42.2, 7690.0], [42.3, 7735.0], [42.4, 7739.0], [42.5, 7764.0], [42.6, 7778.0], [42.7, 7792.0], [42.8, 7805.0], [42.9, 7809.0], [43.0, 7821.0], [43.1, 7827.0], [43.2, 7840.0], [43.3, 7875.0], [43.4, 7885.0], [43.5, 7894.0], [43.6, 7904.0], [43.7, 7908.0], [43.8, 7910.0], [43.9, 7912.0], [44.0, 7915.0], [44.1, 7916.0], [44.2, 7925.0], [44.3, 7928.0], [44.4, 7937.0], [44.5, 7944.0], [44.6, 7968.0], [44.7, 7980.0], [44.8, 7999.0], [44.9, 8007.0], [45.0, 8016.0], [45.1, 8023.0], [45.2, 8036.0], [45.3, 8040.0], [45.4, 8045.0], [45.5, 8066.0], [45.6, 8091.0], [45.7, 8098.0], [45.8, 8101.0], [45.9, 8104.0], [46.0, 8106.0], [46.1, 8107.0], [46.2, 8109.0], [46.3, 8115.0], [46.4, 8120.0], [46.5, 8129.0], [46.6, 8137.0], [46.7, 8138.0], [46.8, 8155.0], [46.9, 8157.0], [47.0, 8168.0], [47.1, 8217.0], [47.2, 8222.0], [47.3, 8250.0], [47.4, 8256.0], [47.5, 8260.0], [47.6, 8261.0], [47.7, 8264.0], [47.8, 8269.0], [47.9, 8281.0], [48.0, 8296.0], [48.1, 8306.0], [48.2, 8318.0], [48.3, 8325.0], [48.4, 8328.0], [48.5, 8332.0], [48.6, 8334.0], [48.7, 8339.0], [48.8, 8351.0], [48.9, 8359.0], [49.0, 8370.0], [49.1, 8376.0], [49.2, 8383.0], [49.3, 8385.0], [49.4, 8389.0], [49.5, 8402.0], [49.6, 8421.0], [49.7, 8425.0], [49.8, 8430.0], [49.9, 8433.0], [50.0, 8434.0], [50.1, 8437.0], [50.2, 8441.0], [50.3, 8446.0], [50.4, 8453.0], [50.5, 8460.0], [50.6, 8472.0], [50.7, 8485.0], [50.8, 8500.0], [50.9, 8509.0], [51.0, 8517.0], [51.1, 8530.0], [51.2, 8557.0], [51.3, 8609.0], [51.4, 8617.0], [51.5, 8626.0], [51.6, 8645.0], [51.7, 8668.0], [51.8, 8676.0], [51.9, 8683.0], [52.0, 8694.0], [52.1, 8711.0], [52.2, 8755.0], [52.3, 8760.0], [52.4, 8764.0], [52.5, 8769.0], [52.6, 8774.0], [52.7, 8778.0], [52.8, 8786.0], [52.9, 8796.0], [53.0, 8804.0], [53.1, 8817.0], [53.2, 8824.0], [53.3, 8827.0], [53.4, 8830.0], [53.5, 8833.0], [53.6, 8839.0], [53.7, 8855.0], [53.8, 8871.0], [53.9, 8874.0], [54.0, 8884.0], [54.1, 8889.0], [54.2, 8891.0], [54.3, 8893.0], [54.4, 8895.0], [54.5, 8896.0], [54.6, 8900.0], [54.7, 8904.0], [54.8, 8907.0], [54.9, 8911.0], [55.0, 8920.0], [55.1, 8934.0], [55.2, 8939.0], [55.3, 8945.0], [55.4, 8974.0], [55.5, 8984.0], [55.6, 8987.0], [55.7, 8995.0], [55.8, 8999.0], [55.9, 9024.0], [56.0, 9047.0], [56.1, 9055.0], [56.2, 9061.0], [56.3, 9070.0], [56.4, 9072.0], [56.5, 9077.0], [56.6, 9101.0], [56.7, 9110.0], [56.8, 9116.0], [56.9, 9120.0], [57.0, 9123.0], [57.1, 9135.0], [57.2, 9151.0], [57.3, 9153.0], [57.4, 9154.0], [57.5, 9161.0], [57.6, 9171.0], [57.7, 9179.0], [57.8, 9189.0], [57.9, 9200.0], [58.0, 9214.0], [58.1, 9242.0], [58.2, 9258.0], [58.3, 9270.0], [58.4, 9275.0], [58.5, 9279.0], [58.6, 9287.0], [58.7, 9308.0], [58.8, 9312.0], [58.9, 9358.0], [59.0, 9363.0], [59.1, 9376.0], [59.2, 9383.0], [59.3, 9386.0], [59.4, 9392.0], [59.5, 9396.0], [59.6, 9402.0], [59.7, 9419.0], [59.8, 9469.0], [59.9, 9477.0], [60.0, 9484.0], [60.1, 9515.0], [60.2, 9571.0], [60.3, 9583.0], [60.4, 9589.0], [60.5, 9595.0], [60.6, 9614.0], [60.7, 9631.0], [60.8, 9644.0], [60.9, 9646.0], [61.0, 9647.0], [61.1, 9650.0], [61.2, 9659.0], [61.3, 9677.0], [61.4, 9684.0], [61.5, 9697.0], [61.6, 9745.0], [61.7, 9752.0], [61.8, 9793.0], [61.9, 9828.0], [62.0, 9838.0], [62.1, 9876.0], [62.2, 9883.0], [62.3, 9898.0], [62.4, 9906.0], [62.5, 9909.0], [62.6, 9920.0], [62.7, 9968.0], [62.8, 9983.0], [62.9, 10036.0], [63.0, 10044.0], [63.1, 10049.0], [63.2, 10058.0], [63.3, 10068.0], [63.4, 10113.0], [63.5, 10118.0], [63.6, 10127.0], [63.7, 10131.0], [63.8, 10168.0], [63.9, 10171.0], [64.0, 10181.0], [64.1, 10193.0], [64.2, 10202.0], [64.3, 10252.0], [64.4, 10275.0], [64.5, 10280.0], [64.6, 10287.0], [64.7, 10301.0], [64.8, 10303.0], [64.9, 10305.0], [65.0, 10313.0], [65.1, 10394.0], [65.2, 10431.0], [65.3, 10464.0], [65.4, 10619.0], [65.5, 10635.0], [65.6, 10646.0], [65.7, 10658.0], [65.8, 10664.0], [65.9, 10671.0], [66.0, 10697.0], [66.1, 10699.0], [66.2, 10758.0], [66.3, 10772.0], [66.4, 11010.0], [66.5, 11054.0], [66.6, 11235.0], [66.7, 11252.0], [66.8, 11312.0], [66.9, 11448.0], [67.0, 11581.0], [67.1, 11617.0], [67.2, 11669.0], [67.3, 11703.0], [67.4, 11824.0], [67.5, 11834.0], [67.6, 11855.0], [67.7, 11858.0], [67.8, 11868.0], [67.9, 11880.0], [68.0, 11890.0], [68.1, 11896.0], [68.2, 11909.0], [68.3, 11925.0], [68.4, 11984.0], [68.5, 12049.0], [68.6, 12059.0], [68.7, 12160.0], [68.8, 12213.0], [68.9, 12305.0], [69.0, 12367.0], [69.1, 12410.0], [69.2, 12462.0], [69.3, 12471.0], [69.4, 12474.0], [69.5, 12479.0], [69.6, 12486.0], [69.7, 12525.0], [69.8, 12544.0], [69.9, 12571.0], [70.0, 12665.0], [70.1, 12701.0], [70.2, 12728.0], [70.3, 12736.0], [70.4, 12742.0], [70.5, 12760.0], [70.6, 12766.0], [70.7, 12771.0], [70.8, 12778.0], [70.9, 12792.0], [71.0, 12799.0], [71.1, 12804.0], [71.2, 12820.0], [71.3, 12852.0], [71.4, 12858.0], [71.5, 12861.0], [71.6, 12865.0], [71.7, 12872.0], [71.8, 12889.0], [71.9, 12894.0], [72.0, 12902.0], [72.1, 12909.0], [72.2, 12918.0], [72.3, 12931.0], [72.4, 12991.0], [72.5, 13010.0], [72.6, 13026.0], [72.7, 13103.0], [72.8, 13121.0], [72.9, 13142.0], [73.0, 13167.0], [73.1, 13186.0], [73.2, 13198.0], [73.3, 13210.0], [73.4, 13255.0], [73.5, 13272.0], [73.6, 13302.0], [73.7, 13311.0], [73.8, 13320.0], [73.9, 13327.0], [74.0, 13346.0], [74.1, 13352.0], [74.2, 13368.0], [74.3, 13469.0], [74.4, 13565.0], [74.5, 13801.0], [74.6, 13858.0], [74.7, 13903.0], [74.8, 13999.0], [74.9, 14205.0], [75.0, 14246.0], [75.1, 14293.0], [75.2, 14314.0], [75.3, 14362.0], [75.4, 14887.0], [75.5, 14991.0], [75.6, 15024.0], [75.7, 15306.0], [75.8, 15342.0], [75.9, 15345.0], [76.0, 15366.0], [76.1, 15546.0], [76.2, 15559.0], [76.3, 15651.0], [76.4, 16915.0], [76.5, 17208.0], [76.6, 17613.0], [76.7, 17667.0], [76.8, 17976.0], [76.9, 18437.0], [77.0, 18493.0], [77.1, 18755.0], [77.2, 19059.0], [77.3, 19754.0], [77.4, 19771.0], [77.5, 20122.0], [77.6, 20938.0], [77.7, 21234.0], [77.8, 21291.0], [77.9, 21778.0], [78.0, 23085.0], [78.1, 23485.0], [78.2, 23532.0], [78.3, 23626.0], [78.4, 23833.0], [78.5, 23990.0], [78.6, 24057.0], [78.7, 24209.0], [78.8, 24282.0], [78.9, 24483.0], [79.0, 24525.0], [79.1, 24573.0], [79.2, 24594.0], [79.3, 24662.0], [79.4, 24867.0], [79.5, 24986.0], [79.6, 25029.0], [79.7, 25069.0], [79.8, 25087.0], [79.9, 25151.0], [80.0, 25264.0], [80.1, 25479.0], [80.2, 25508.0], [80.3, 25557.0], [80.4, 25605.0], [80.5, 25731.0], [80.6, 25768.0], [80.7, 25839.0], [80.8, 25913.0], [80.9, 25934.0], [81.0, 26006.0], [81.1, 26184.0], [81.2, 26292.0], [81.3, 26341.0], [81.4, 26452.0], [81.5, 26559.0], [81.6, 26617.0], [81.7, 26718.0], [81.8, 27016.0], [81.9, 27219.0], [82.0, 27351.0], [82.1, 27561.0], [82.2, 27606.0], [82.3, 27644.0], [82.4, 27722.0], [82.5, 27941.0], [82.6, 27972.0], [82.7, 28009.0], [82.8, 28027.0], [82.9, 28052.0], [83.0, 28066.0], [83.1, 28078.0], [83.2, 28109.0], [83.3, 28153.0], [83.4, 28203.0], [83.5, 28243.0], [83.6, 28403.0], [83.7, 28462.0], [83.8, 28498.0], [83.9, 28530.0], [84.0, 28576.0], [84.1, 28624.0], [84.2, 28661.0], [84.3, 28696.0], [84.4, 28734.0], [84.5, 28782.0], [84.6, 28801.0], [84.7, 28884.0], [84.8, 28897.0], [84.9, 28910.0], [85.0, 29024.0], [85.1, 29070.0], [85.2, 29097.0], [85.3, 29111.0], [85.4, 29205.0], [85.5, 29317.0], [85.6, 29420.0], [85.7, 29455.0], [85.8, 29476.0], [85.9, 29501.0], [86.0, 29552.0], [86.1, 29602.0], [86.2, 29619.0], [86.3, 29691.0], [86.4, 29723.0], [86.5, 29840.0], [86.6, 29896.0], [86.7, 29935.0], [86.8, 30013.0], [86.9, 30129.0], [87.0, 30193.0], [87.1, 30276.0], [87.2, 30299.0], [87.3, 30388.0], [87.4, 30501.0], [87.5, 30573.0], [87.6, 30806.0], [87.7, 30886.0], [87.8, 30935.0], [87.9, 31017.0], [88.0, 31134.0], [88.1, 31166.0], [88.2, 31311.0], [88.3, 31596.0], [88.4, 31617.0], [88.5, 31746.0], [88.6, 31947.0], [88.7, 32052.0], [88.8, 32075.0], [88.9, 32174.0], [89.0, 32340.0], [89.1, 32375.0], [89.2, 32394.0], [89.3, 32427.0], [89.4, 32567.0], [89.5, 32628.0], [89.6, 32658.0], [89.7, 32671.0], [89.8, 32693.0], [89.9, 32750.0], [90.0, 32850.0], [90.1, 32907.0], [90.2, 32942.0], [90.3, 32965.0], [90.4, 33096.0], [90.5, 33126.0], [90.6, 33149.0], [90.7, 33170.0], [90.8, 33193.0], [90.9, 33243.0], [91.0, 33251.0], [91.1, 33385.0], [91.2, 33474.0], [91.3, 33514.0], [91.4, 33537.0], [91.5, 33551.0], [91.6, 33581.0], [91.7, 33606.0], [91.8, 33650.0], [91.9, 33703.0], [92.0, 33734.0], [92.1, 33770.0], [92.2, 33825.0], [92.3, 33883.0], [92.4, 33951.0], [92.5, 34000.0], [92.6, 34114.0], [92.7, 34181.0], [92.8, 34302.0], [92.9, 34412.0], [93.0, 34470.0], [93.1, 34585.0], [93.2, 34602.0], [93.3, 34630.0], [93.4, 34758.0], [93.5, 34775.0], [93.6, 34795.0], [93.7, 34820.0], [93.8, 34882.0], [93.9, 34930.0], [94.0, 34990.0], [94.1, 35249.0], [94.2, 35333.0], [94.3, 35447.0], [94.4, 35636.0], [94.5, 35767.0], [94.6, 35826.0], [94.7, 36087.0], [94.8, 36363.0], [94.9, 36464.0], [95.0, 36679.0], [95.1, 36978.0], [95.2, 37015.0], [95.3, 37061.0], [95.4, 37118.0], [95.5, 37129.0], [95.6, 37273.0], [95.7, 37472.0], [95.8, 37728.0], [95.9, 37830.0], [96.0, 38118.0], [96.1, 38253.0], [96.2, 38359.0], [96.3, 38404.0], [96.4, 38580.0], [96.5, 38883.0], [96.6, 39453.0], [96.7, 39976.0], [96.8, 40106.0], [96.9, 40664.0], [97.0, 40726.0], [97.1, 41703.0], [97.2, 41748.0], [97.3, 42174.0], [97.4, 42290.0], [97.5, 42392.0], [97.6, 42403.0], [97.7, 42860.0], [97.8, 44432.0], [97.9, 44814.0], [98.0, 46030.0], [98.1, 47901.0], [98.2, 49116.0], [98.3, 52266.0], [98.4, 53375.0], [98.5, 54566.0], [98.6, 58086.0], [98.7, 61591.0], [98.8, 61643.0], [98.9, 64215.0], [99.0, 64314.0], [99.1, 70134.0], [99.2, 72978.0], [99.3, 73744.0], [99.4, 74780.0], [99.5, 75528.0], [99.6, 77470.0], [99.7, 79200.0], [99.8, 80052.0], [99.9, 82405.0]], "isOverall": false, "label": "conf #1 req", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6137.0, "series": [{"data": [[0.0, 6137.0], [74700.0, 12.0], [79500.0, 2.0], [84300.0, 3.0], [100.0, 15.0], [33700.0, 57.0], [34500.0, 35.0], [32900.0, 57.0], [35300.0, 19.0], [36100.0, 3.0], [37700.0, 21.0], [36900.0, 18.0], [38500.0, 7.0], [40100.0, 12.0], [39300.0, 1.0], [41700.0, 28.0], [44900.0, 1.0], [48900.0, 1.0], [52900.0, 8.0], [54500.0, 19.0], [61700.0, 1.0], [65800.0, 4.0], [80200.0, 2.0], [700.0, 11.0], [800.0, 52.0], [900.0, 28.0], [1000.0, 44.0], [1100.0, 39.0], [1200.0, 23.0], [1300.0, 21.0], [1400.0, 14.0], [1500.0, 17.0], [1600.0, 16.0], [1700.0, 9.0], [1800.0, 9.0], [1900.0, 12.0], [2000.0, 10.0], [2100.0, 17.0], [2200.0, 15.0], [2300.0, 15.0], [2400.0, 10.0], [2500.0, 20.0], [2600.0, 27.0], [2700.0, 9.0], [2800.0, 4.0], [2900.0, 17.0], [3000.0, 1.0], [3100.0, 7.0], [3200.0, 24.0], [3300.0, 1.0], [3400.0, 37.0], [3500.0, 52.0], [3700.0, 29.0], [3600.0, 1.0], [3800.0, 45.0], [3900.0, 1.0], [4000.0, 28.0], [4300.0, 23.0], [4200.0, 3.0], [4100.0, 19.0], [4600.0, 125.0], [4500.0, 3.0], [72900.0, 26.0], [4400.0, 64.0], [4800.0, 32.0], [4700.0, 2.0], [74500.0, 12.0], [5100.0, 9.0], [5000.0, 2.0], [4900.0, 32.0], [79300.0, 5.0], [5200.0, 68.0], [5500.0, 26.0], [5600.0, 43.0], [5400.0, 64.0], [5800.0, 70.0], [5700.0, 74.0], [5900.0, 74.0], [6000.0, 54.0], [6100.0, 31.0], [6200.0, 114.0], [6300.0, 37.0], [6600.0, 33.0], [6500.0, 4.0], [6400.0, 23.0], [6900.0, 64.0], [6800.0, 46.0], [6700.0, 16.0], [7100.0, 33.0], [7000.0, 31.0], [7400.0, 36.0], [7200.0, 177.0], [7300.0, 4.0], [7500.0, 55.0], [7600.0, 132.0], [7900.0, 245.0], [7700.0, 107.0], [7800.0, 168.0], [8100.0, 261.0], [8000.0, 186.0], [8400.0, 265.0], [8600.0, 151.0], [8200.0, 197.0], [9000.0, 159.0], [8800.0, 326.0], [9200.0, 152.0], [9400.0, 104.0], [9600.0, 197.0], [10200.0, 102.0], [10000.0, 106.0], [9800.0, 103.0], [10600.0, 151.0], [10400.0, 36.0], [11000.0, 37.0], [11200.0, 33.0], [10800.0, 4.0], [11400.0, 8.0], [11600.0, 44.0], [12000.0, 42.0], [12200.0, 20.0], [11800.0, 155.0], [12400.0, 111.0], [12600.0, 28.0], [12800.0, 197.0], [13200.0, 74.0], [13000.0, 46.0], [13800.0, 33.0], [13600.0, 2.0], [13400.0, 21.0], [14200.0, 45.0], [14000.0, 3.0], [14800.0, 7.0], [14400.0, 1.0], [14600.0, 1.0], [15200.0, 3.0], [15000.0, 22.0], [15800.0, 8.0], [15400.0, 2.0], [15600.0, 18.0], [16000.0, 1.0], [17200.0, 17.0], [16400.0, 1.0], [17600.0, 30.0], [18400.0, 29.0], [18000.0, 1.0], [18800.0, 1.0], [19200.0, 1.0], [19600.0, 1.0], [20400.0, 6.0], [21200.0, 26.0], [22000.0, 1.0], [21600.0, 11.0], [24400.0, 16.0], [24000.0, 18.0], [23600.0, 10.0], [24800.0, 21.0], [25200.0, 15.0], [26000.0, 11.0], [26400.0, 16.0], [25600.0, 13.0], [26800.0, 1.0], [27200.0, 23.0], [27600.0, 33.0], [28000.0, 104.0], [28400.0, 44.0], [29600.0, 45.0], [29200.0, 18.0], [28800.0, 45.0], [30400.0, 18.0], [30000.0, 11.0], [31600.0, 32.0], [31200.0, 15.0], [30800.0, 23.0], [32400.0, 22.0], [32000.0, 42.0], [33600.0, 43.0], [34400.0, 27.0], [32800.0, 28.0], [35200.0, 13.0], [36000.0, 8.0], [36800.0, 11.0], [37600.0, 12.0], [38400.0, 18.0], [40000.0, 9.0], [39200.0, 1.0], [40800.0, 2.0], [41600.0, 7.0], [42400.0, 17.0], [44800.0, 14.0], [45600.0, 4.0], [48800.0, 1.0], [52800.0, 2.0], [53600.0, 3.0], [56800.0, 3.0], [61600.0, 26.0], [80000.0, 8.0], [84700.0, 1.0], [33100.0, 79.0], [33900.0, 31.0], [34700.0, 44.0], [35500.0, 1.0], [36300.0, 7.0], [37900.0, 7.0], [38700.0, 7.0], [37100.0, 44.0], [39500.0, 1.0], [41900.0, 9.0], [41100.0, 1.0], [42700.0, 4.0], [49100.0, 15.0], [47500.0, 1.0], [49900.0, 6.0], [64300.0, 9.0], [69400.0, 1.0], [77400.0, 5.0], [70100.0, 5.0], [17300.0, 2.0], [16900.0, 1.0], [16500.0, 1.0], [18100.0, 1.0], [18900.0, 1.0], [19300.0, 1.0], [18500.0, 9.0], [20100.0, 8.0], [19700.0, 28.0], [21300.0, 3.0], [20900.0, 4.0], [22100.0, 1.0], [21700.0, 2.0], [22500.0, 9.0], [24500.0, 52.0], [24100.0, 12.0], [23700.0, 1.0], [24900.0, 14.0], [25300.0, 5.0], [25700.0, 32.0], [26100.0, 13.0], [26500.0, 23.0], [27300.0, 11.0], [26900.0, 1.0], [28100.0, 38.0], [28500.0, 43.0], [27700.0, 15.0], [28900.0, 27.0], [29300.0, 11.0], [29700.0, 31.0], [30500.0, 23.0], [30100.0, 31.0], [31700.0, 13.0], [31300.0, 9.0], [30900.0, 31.0], [32500.0, 15.0], [32100.0, 21.0], [33000.0, 13.0], [34600.0, 40.0], [33800.0, 32.0], [35400.0, 15.0], [36200.0, 10.0], [37800.0, 7.0], [37000.0, 36.0], [39400.0, 12.0], [40200.0, 2.0], [41800.0, 2.0], [42600.0, 2.0], [45000.0, 1.0], [49000.0, 13.0], [47400.0, 12.0], [52200.0, 1.0], [61000.0, 2.0], [64200.0, 28.0], [75600.0, 3.0], [75500.0, 1.0], [33300.0, 8.0], [34100.0, 27.0], [34900.0, 47.0], [36500.0, 14.0], [35700.0, 12.0], [37300.0, 4.0], [38100.0, 11.0], [38900.0, 4.0], [42100.0, 10.0], [42900.0, 2.0], [43700.0, 1.0], [53300.0, 11.0], [58100.0, 4.0], [73000.0, 4.0], [73700.0, 7.0], [76900.0, 13.0], [78500.0, 14.0], [8300.0, 290.0], [8500.0, 98.0], [8700.0, 181.0], [9100.0, 259.0], [8900.0, 245.0], [9500.0, 88.0], [9300.0, 181.0], [9700.0, 65.0], [10100.0, 166.0], [9900.0, 94.0], [10500.0, 10.0], [10700.0, 42.0], [10300.0, 89.0], [10900.0, 4.0], [11100.0, 8.0], [11300.0, 25.0], [11500.0, 31.0], [11700.0, 12.0], [11900.0, 61.0], [12100.0, 29.0], [12500.0, 68.0], [12300.0, 35.0], [12700.0, 182.0], [12900.0, 91.0], [13300.0, 122.0], [13100.0, 109.0], [13700.0, 17.0], [13500.0, 19.0], [13900.0, 28.0], [14100.0, 12.0], [14300.0, 48.0], [14700.0, 2.0], [14500.0, 1.0], [15300.0, 76.0], [15100.0, 7.0], [14900.0, 26.0], [15700.0, 1.0], [15500.0, 28.0], [15900.0, 1.0], [16300.0, 1.0], [16100.0, 1.0], [17400.0, 2.0], [17000.0, 3.0], [16600.0, 1.0], [18200.0, 1.0], [19400.0, 1.0], [18600.0, 3.0], [19000.0, 17.0], [19800.0, 7.0], [21400.0, 2.0], [21000.0, 11.0], [21800.0, 5.0], [23400.0, 21.0], [23000.0, 6.0], [24200.0, 26.0], [23800.0, 11.0], [24600.0, 23.0], [25000.0, 60.0], [25400.0, 28.0], [26200.0, 29.0], [26600.0, 16.0], [25800.0, 27.0], [27000.0, 8.0], [27400.0, 16.0], [27800.0, 15.0], [28200.0, 27.0], [28600.0, 59.0], [29400.0, 72.0], [29000.0, 55.0], [29800.0, 27.0], [30200.0, 39.0], [30600.0, 4.0], [31400.0, 1.0], [31000.0, 11.0], [31800.0, 10.0], [32600.0, 77.0], [32200.0, 6.0], [34800.0, 42.0], [34000.0, 17.0], [33200.0, 52.0], [35600.0, 30.0], [36400.0, 19.0], [37200.0, 11.0], [38000.0, 8.0], [38800.0, 20.0], [39600.0, 1.0], [40400.0, 1.0], [42800.0, 7.0], [44400.0, 25.0], [46000.0, 3.0], [49200.0, 1.0], [53200.0, 6.0], [58000.0, 8.0], [74400.0, 2.0], [77600.0, 1.0], [80800.0, 8.0], [79200.0, 12.0], [82400.0, 16.0], [79100.0, 3.0], [83900.0, 3.0], [33500.0, 89.0], [34300.0, 18.0], [35100.0, 4.0], [35900.0, 4.0], [38300.0, 23.0], [37500.0, 3.0], [39900.0, 17.0], [39100.0, 1.0], [40700.0, 8.0], [42300.0, 32.0], [41500.0, 1.0], [43100.0, 4.0], [44700.0, 1.0], [47900.0, 2.0], [61500.0, 14.0], [67000.0, 8.0], [17100.0, 13.0], [16700.0, 1.0], [18300.0, 1.0], [17500.0, 1.0], [17900.0, 21.0], [18700.0, 14.0], [19100.0, 1.0], [19900.0, 4.0], [19500.0, 1.0], [20300.0, 13.0], [21100.0, 1.0], [21500.0, 1.0], [23500.0, 34.0], [23100.0, 2.0], [24300.0, 9.0], [23900.0, 27.0], [25100.0, 18.0], [24700.0, 10.0], [25500.0, 44.0], [25900.0, 46.0], [26300.0, 27.0], [27500.0, 17.0], [26700.0, 22.0], [27100.0, 5.0], [28300.0, 12.0], [27900.0, 37.0], [29500.0, 41.0], [29100.0, 31.0], [28700.0, 57.0], [29900.0, 37.0], [30700.0, 13.0], [30300.0, 21.0], [31500.0, 14.0], [31100.0, 40.0], [32300.0, 55.0], [32700.0, 24.0], [31900.0, 6.0], [33400.0, 24.0], [34200.0, 14.0], [36600.0, 10.0], [35800.0, 22.0], [35000.0, 4.0], [38200.0, 22.0], [37400.0, 12.0], [39800.0, 1.0], [40600.0, 27.0], [41400.0, 2.0], [42200.0, 14.0], [43000.0, 2.0], [47000.0, 1.0], [47800.0, 4.0], [50200.0, 1.0], [59800.0, 2.0], [74800.0, 12.0]], "isOverall": false, "label": "conf #1 req", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 84700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 135.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 19865.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 135.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 19865.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 16.399999999999995, "minX": 1.74560094E12, "maxY": 500.0, "series": [{"data": [[1.74560118E12, 500.0], [1.74560148E12, 187.30693677102516], [1.745601E12, 499.77352941176525], [1.7456013E12, 475.6661450182575], [1.74560112E12, 500.0], [1.74560142E12, 345.0564516129032], [1.74560094E12, 257.1089324618739], [1.74560124E12, 494.5875706214685], [1.74560154E12, 16.399999999999995], [1.74560106E12, 500.0], [1.74560136E12, 440.13393870601595]], "isOverall": false, "label": "First Config Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74560154E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.0, "maxY": 76825.07142857145, "series": [{"data": [[2.0, 949.0], [3.0, 1028.0], [4.0, 1042.0], [6.0, 1056.5], [7.0, 1060.0], [9.0, 1099.3333333333333], [10.0, 1149.0], [11.0, 1148.0], [12.0, 1156.0], [13.0, 1189.6666666666667], [14.0, 1152.6], [15.0, 1106.0], [17.0, 1121.0], [18.0, 1098.0], [20.0, 1151.0], [21.0, 1105.0], [22.0, 1142.857142857143], [23.0, 1235.0], [24.0, 1263.0], [25.0, 1459.0], [26.0, 1447.4], [27.0, 1161.6666666666667], [28.0, 1385.25], [29.0, 1454.6666666666667], [30.0, 1691.8333333333333], [31.0, 1601.0], [32.0, 1661.8333333333335], [33.0, 1964.0], [35.0, 1081.2727272727273], [34.0, 1884.0], [36.0, 1541.8], [37.0, 790.0], [38.0, 829.0], [39.0, 1600.75], [40.0, 1313.3636363636363], [41.0, 1049.8], [42.0, 825.0], [43.0, 808.6666666666666], [44.0, 2040.111111111111], [45.0, 936.1249999999999], [46.0, 840.5], [47.0, 846.3333333333334], [48.0, 834.75], [49.0, 2194.923076923077], [50.0, 857.0], [51.0, 1674.6], [52.0, 1416.25], [53.0, 2550.727272727273], [54.0, 1330.2], [56.0, 1442.4], [58.0, 910.0000000000001], [59.0, 2748.555555555555], [60.0, 985.0], [61.0, 1028.6666666666667], [62.0, 1061.0], [63.0, 1092.0], [64.0, 3195.090909090909], [65.0, 1992.8571428571431], [67.0, 3532.0], [66.0, 3534.0], [69.0, 1312.4285714285713], [71.0, 3534.0], [70.0, 3533.0], [74.0, 1321.4999999999998], [73.0, 3535.0], [72.0, 3535.833333333333], [78.0, 3077.8181818181815], [77.0, 3534.0], [76.0, 3533.0], [81.0, 2217.1153846153843], [82.0, 3743.0], [80.0, 3934.2], [87.0, 2346.1600000000003], [86.0, 3744.75], [84.0, 3743.75], [88.0, 2719.6], [91.0, 3927.2727272727275], [94.0, 4615.61111111111], [93.0, 4670.0], [96.0, 3003.3513513513517], [97.0, 3655.5], [103.0, 4361.625], [101.0, 4928.0], [100.0, 4159.666666666667], [106.0, 4916.0], [105.0, 4591.444444444444], [104.0, 4550.0625], [108.0, 3358.708333333333], [109.0, 3179.3846153846152], [115.0, 4638.7], [119.0, 3056.5], [118.0, 2665.0], [117.0, 2944.9999999999995], [116.0, 4219.78787878788], [123.0, 5255.333333333334], [121.0, 4616.272727272727], [126.0, 4354.446808510639], [127.0, 5108.5], [125.0, 5933.888888888889], [124.0, 5603.0], [134.0, 6253.5], [133.0, 7566.909090909091], [131.0, 7674.142857142858], [128.0, 4985.75], [143.0, 5213.5], [142.0, 5214.0], [140.0, 6589.999999999999], [139.0, 7820.75], [138.0, 6700.0], [137.0, 5660.333333333333], [136.0, 7062.499999999999], [145.0, 5134.169491525422], [150.0, 6655.181818181818], [148.0, 5216.142857142856], [158.0, 6355.6399999999985], [157.0, 7953.0], [156.0, 7085.333333333332], [162.0, 6739.9], [166.0, 5674.000000000001], [161.0, 6214.666666666667], [160.0, 7081.5], [175.0, 10309.142857142859], [173.0, 6976.0], [172.0, 7072.0], [171.0, 7073.0], [169.0, 6975.909090909091], [168.0, 6887.571428571429], [181.0, 7958.266666666666], [183.0, 7910.043478260869], [182.0, 9361.624999999998], [180.0, 9633.714285714286], [179.0, 9487.117647058825], [178.0, 10052.4], [177.0, 11058.0], [176.0, 10209.214285714286], [188.0, 5736.38888888889], [191.0, 7783.416666666666], [190.0, 7806.733333333334], [189.0, 7642.0], [187.0, 7649.0], [186.0, 7633.0], [185.0, 7629.857142857142], [199.0, 7257.4], [198.0, 7257.333333333333], [197.0, 8798.333333333332], [196.0, 4099.285714285715], [195.0, 4099.0], [194.0, 5011.166666666666], [206.0, 8350.857142857141], [207.0, 9506.833333333332], [205.0, 9801.4], [204.0, 9928.333333333332], [203.0, 12516.5], [202.0, 10967.571428571428], [201.0, 8107.8], [200.0, 7256.0], [215.0, 8270.875], [214.0, 8895.4], [213.0, 10377.666666666668], [212.0, 7233.0], [211.0, 8485.083333333332], [210.0, 11954.0], [209.0, 7236.0], [208.0, 7236.5], [216.0, 6797.918918918918], [220.0, 6241.529411764706], [223.0, 11268.916666666668], [222.0, 8587.3125], [221.0, 8072.934782608693], [219.0, 7824.0], [217.0, 8610.625], [231.0, 10106.045454545454], [230.0, 10691.333333333334], [229.0, 11883.0], [228.0, 9514.0], [227.0, 11022.238095238095], [226.0, 10680.666666666666], [225.0, 11858.6], [239.0, 10295.448275862069], [238.0, 9995.545454545454], [237.0, 9478.307692307693], [236.0, 9448.181818181818], [235.0, 9038.434782608698], [233.0, 10102.5], [232.0, 11890.5], [243.0, 10480.75], [247.0, 9814.166666666666], [246.0, 7906.454545454545], [245.0, 6896.703703703703], [244.0, 6044.88], [242.0, 5614.846153846154], [241.0, 11538.0], [240.0, 10148.92857142857], [255.0, 8199.0], [254.0, 11400.833333333334], [253.0, 13471.64705882353], [252.0, 13570.857142857145], [251.0, 14721.333333333332], [250.0, 9140.0], [249.0, 11444.58333333333], [248.0, 11324.58620689655], [271.0, 8831.769230769232], [261.0, 10499.37662337663], [260.0, 9401.437499999998], [262.0, 11364.4], [264.0, 8221.239130434782], [269.0, 8105.0], [267.0, 9990.833333333332], [266.0, 9299.7], [265.0, 12407.30303030303], [263.0, 11061.666666666664], [257.0, 9015.656250000002], [256.0, 8597.272727272728], [258.0, 12583.0], [287.0, 13933.18367346939], [283.0, 9065.404958677687], [286.0, 14046.454545454544], [285.0, 14632.2], [284.0, 15201.318181818184], [275.0, 9054.70588235294], [274.0, 11152.000000000002], [273.0, 13421.75], [272.0, 8770.470588235294], [282.0, 12871.739130434782], [281.0, 13341.333333333334], [280.0, 12949.999999999998], [279.0, 13009.625], [278.0, 8854.32], [277.0, 5718.437499999999], [276.0, 10729.18604651163], [302.0, 76825.07142857145], [303.0, 66823.75], [301.0, 70566.214953271], [300.0, 68726.14285714286], [299.0, 40117.5], [298.0, 74367.38888888888], [297.0, 60580.0], [296.0, 43206.914893617024], [295.0, 39976.99999999999], [289.0, 14867.266666666666], [288.0, 13417.318181818182], [291.0, 46107.0], [290.0, 15007.25], [294.0, 42758.880000000005], [292.0, 50616.90909090909], [317.0, 3.0], [319.0, 6.0], [316.0, 4.5], [307.0, 8.75], [306.0, 3.0], [305.0, 8.6], [304.0, 24647.5], [315.0, 6.0], [314.0, 5.5], [313.0, 4.5], [312.0, 4.0], [311.0, 4.0], [310.0, 7.0], [309.0, 12.0], [308.0, 17.5], [334.0, 4.666666666666667], [322.0, 7105.840707964597], [335.0, 4.0], [332.0, 10.0], [323.0, 6.0], [331.0, 7.0], [330.0, 11.8], [329.0, 18.4], [328.0, 22.0], [327.0, 10.833333333333334], [320.0, 4.666666666666667], [326.0, 7.625], [325.0, 4.6], [350.0, 11.882352941176471], [351.0, 6.111111111111111], [349.0, 8.0], [348.0, 5.0], [347.0, 9.333333333333332], [346.0, 13.5], [345.0, 7.071428571428571], [344.0, 6.857142857142858], [343.0, 12.285714285714285], [337.0, 4.8], [336.0, 4.333333333333333], [339.0, 22.75], [338.0, 13.0], [342.0, 16.75], [341.0, 6.5], [340.0, 19.333333333333332], [365.0, 12.571428571428571], [355.0, 1516.5333333333335], [362.0, 10680.533333333326], [363.0, 12162.640000000003], [366.0, 76.88888888888891], [364.0, 9.333333333333334], [361.0, 11.142857142857142], [359.0, 10.0], [352.0, 6.500000000000001], [354.0, 11.727272727272728], [353.0, 8.5], [358.0, 9.0], [357.0, 5.5], [356.0, 18.166666666666664], [382.0, 21.513513513513516], [383.0, 24.6], [381.0, 9.8], [371.0, 6.624999999999999], [370.0, 13982.466666666669], [369.0, 48.77777777777778], [368.0, 53.5], [379.0, 6.0], [377.0, 8.0], [376.0, 7.0], [375.0, 9.444444444444445], [374.0, 12.666666666666666], [373.0, 11.0], [372.0, 6.333333333333334], [398.0, 6.157894736842104], [389.0, 10483.943820224718], [388.0, 6.0], [390.0, 4818.590909090908], [399.0, 2284.9375], [397.0, 22.833333333333332], [396.0, 17.181818181818183], [391.0, 36.285714285714285], [385.0, 17.736842105263158], [384.0, 8.625], [387.0, 4.833333333333333], [386.0, 5.666666666666667], [395.0, 6.222222222222222], [394.0, 10.578947368421053], [393.0, 17.833333333333332], [392.0, 14.47058823529412], [414.0, 5.333333333333333], [415.0, 11.187500000000002], [413.0, 19878.583333333332], [412.0, 4876.214285714286], [411.0, 6335.181818181819], [409.0, 28.738095238095234], [408.0, 6.571428571428571], [407.0, 8.739130434782611], [401.0, 14.454545454545453], [400.0, 36463.66666666667], [403.0, 6.4], [402.0, 7.5], [406.0, 17.125], [405.0, 22.4], [404.0, 16.638888888888886], [430.0, 11686.830357142857], [431.0, 26851.47887323944], [429.0, 28438.875], [428.0, 27043.46153846154], [427.0, 19068.583333333332], [426.0, 48502.74999999999], [425.0, 41556.066666666666], [424.0, 43.80952380952382], [423.0, 23.333333333333332], [417.0, 17104.537313432837], [416.0, 9.0], [419.0, 9722.05555555556], [418.0, 36090.5], [422.0, 30770.722222222226], [421.0, 34792.55882352941], [420.0, 31424.666666666664], [446.0, 16965.520833333332], [447.0, 14763.230769230768], [445.0, 12886.090909090906], [444.0, 16872.25], [443.0, 10433.66666666667], [442.0, 9073.4], [441.0, 9377.75], [440.0, 30026.26315789474], [439.0, 17266.97058823529], [433.0, 25985.0], [432.0, 8519.0], [435.0, 13974.176470588238], [434.0, 26178.85714285714], [438.0, 20088.920000000002], [437.0, 19111.986486486487], [436.0, 18338.299999999992], [462.0, 11494.589552238807], [463.0, 22309.0], [461.0, 11598.0], [451.0, 14272.620689655174], [450.0, 12880.0], [448.0, 10161.078125000004], [459.0, 13100.925925925927], [458.0, 10336.636363636364], [457.0, 25329.47945205479], [456.0, 23492.79166666667], [455.0, 11876.37142857143], [454.0, 18308.105263157897], [453.0, 10306.166666666668], [452.0, 12850.103448275859], [467.0, 16764.916666666664], [464.0, 18752.320000000003], [465.0, 5125.25], [466.0, 13474.056818181818], [468.0, 16632.916666666664], [470.0, 12634.218750000004], [469.0, 5911.894736842106], [471.0, 30349.138888888887], [479.0, 13223.478260869564], [473.0, 10263.822033898308], [472.0, 28790.0], [475.0, 16755.04761904762], [474.0, 17617.70588235294], [478.0, 15304.752000000002], [477.0, 14410.142857142857], [476.0, 17051.5], [494.0, 13003.247058823532], [493.0, 5.0], [495.0, 11448.32558139535], [492.0, 17438.425531914894], [491.0, 8.625], [490.0, 13174.819767441857], [489.0, 22.686274509803923], [488.0, 5802.289256198348], [487.0, 15944.698581560277], [480.0, 13881.016129032258], [483.0, 11097.898550724636], [482.0, 18476.08888888889], [486.0, 15171.891891891893], [485.0, 23105.23076923077], [484.0, 12914.183333333325], [496.0, 9991.869791666659], [498.0, 9705.868253968249], [499.0, 10973.735849056606], [500.0, 11354.206948946496], [497.0, 12157.263033175348], [1.0, 934.0]], "isOverall": false, "label": "conf #1 req", "isController": false}, {"data": [[436.4491499999973, 11988.013749999966]], "isOverall": false, "label": "conf #1 req-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 143.0, "minX": 1.74560094E12, "maxY": 52967.916666666664, "series": [{"data": [[1.74560118E12, 47005.76666666667], [1.74560148E12, 6278.883333333333], [1.745601E12, 43937.433333333334], [1.7456013E12, 22593.716666666667], [1.74560112E12, 52967.916666666664], [1.74560142E12, 45356.066666666666], [1.74560094E12, 5548.916666666667], [1.74560124E12, 43952.25], [1.74560154E12, 211.75], [1.74560106E12, 52242.21666666667], [1.74560136E12, 3398.15]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74560118E12, 4344.6], [1.74560148E12, 4235.4], [1.745601E12, 3928.6], [1.7456013E12, 3996.2], [1.74560112E12, 3692.0], [1.74560142E12, 2347.8], [1.74560094E12, 3564.6], [1.74560124E12, 3702.4], [1.74560154E12, 143.0], [1.74560106E12, 3733.6], [1.74560136E12, 2290.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74560154E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1165.3636363636363, "minX": 1.74560094E12, "maxY": 18515.962542565292, "series": [{"data": [[1.74560118E12, 12708.708012326655], [1.74560148E12, 7890.785758133851], [1.745601E12, 10930.309663865542], [1.7456013E12, 15249.585811163282], [1.74560112E12, 10302.625649220923], [1.74560142E12, 17312.174731182782], [1.74560094E12, 7254.208424110387], [1.74560124E12, 11535.066927422828], [1.74560154E12, 1165.3636363636363], [1.74560106E12, 11103.8692522991], [1.74560136E12, 18515.962542565292]], "isOverall": false, "label": "conf #1 req", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74560154E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1165.3636363636363, "minX": 1.74560094E12, "maxY": 18515.6867196368, "series": [{"data": [[1.74560118E12, 12701.05161787362], [1.74560148E12, 7890.189073050956], [1.745601E12, 10922.257983193276], [1.7456013E12, 15245.35785080856], [1.74560112E12, 10292.768278066296], [1.74560142E12, 17018.990322580652], [1.74560094E12, 7252.518518518509], [1.74560124E12, 11527.740112994346], [1.74560154E12, 1165.3636363636363], [1.74560106E12, 11092.251099560153], [1.74560136E12, 18515.6867196368]], "isOverall": false, "label": "conf #1 req", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74560154E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74560094E12, "maxY": 14.93082766893244, "series": [{"data": [[1.74560118E12, 10.275423728813578], [1.74560148E12, 0.7685696746470215], [1.745601E12, 9.171428571428574], [1.7456013E12, 7.520605112154427], [1.74560112E12, 11.213743507790673], [1.74560142E12, 10.331720430107545], [1.74560094E12, 4.084241103848945], [1.74560124E12, 9.481095176010433], [1.74560154E12, 0.0], [1.74560106E12, 14.93082766893244], [1.74560136E12, 2.5539160045402944]], "isOverall": false, "label": "conf #1 req", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74560154E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 762.0, "minX": 1.74560094E12, "maxY": 1098.0, "series": [{"data": [[1.74560118E12, 952.0], [1.74560094E12, 1095.0], [1.74560154E12, 1098.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74560118E12, 943.0], [1.74560094E12, 762.0], [1.74560154E12, 934.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74560118E12, 952.0], [1.74560094E12, 1055.6], [1.74560154E12, 1095.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74560118E12, 952.0], [1.74560094E12, 1094.83], [1.74560154E12, 1098.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74560118E12, 950.0], [1.74560094E12, 878.0], [1.74560154E12, 1065.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.74560118E12, 952.0], [1.74560094E12, 1068.3], [1.74560154E12, 1098.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74560154E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5.5, "minX": 1.0, "maxY": 78547.0, "series": [{"data": [[32.0, 830.0], [2.0, 988.5], [1.0, 934.0], [37.0, 915.0], [19.0, 1027.5], [10.0, 1071.0], [23.0, 1078.0], [6.0, 955.0], [3.0, 950.0], [12.0, 1098.0], [7.0, 1055.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 28.0], [3.0, 13.0], [4.0, 4978.5], [5.0, 11.0], [6.0, 1245.0], [7.0, 9.0], [8.0, 5.5], [9.0, 13.0], [10.0, 40.5], [11.0, 8.0], [12.0, 6799.0], [13.0, 43.0], [14.0, 19.0], [15.0, 27.5], [16.0, 4296.5], [17.0, 48.0], [18.0, 17040.0], [19.0, 11240.0], [20.0, 5151.0], [21.0, 34746.0], [22.0, 24.5], [23.0, 54.0], [24.0, 43.0], [25.0, 62.0], [26.0, 41.0], [27.0, 4629.0], [28.0, 29617.5], [29.0, 21.0], [30.0, 49.0], [31.0, 62.0], [32.0, 49.5], [34.0, 3499.0], [35.0, 5973.0], [37.0, 1223.0], [36.0, 10759.0], [39.0, 68.0], [38.0, 26.0], [40.0, 54.5], [42.0, 22.0], [45.0, 5217.0], [46.0, 4620.0], [48.0, 32660.0], [51.0, 32919.0], [50.0, 8.0], [52.0, 4098.5], [54.0, 7406.5], [55.0, 4462.0], [57.0, 13271.5], [56.0, 12477.0], [59.0, 2436.0], [61.0, 10698.0], [67.0, 10102.5], [64.0, 78547.0], [68.0, 8260.0], [70.0, 9679.5], [69.0, 6.0], [71.0, 5726.0], [72.0, 6258.5], [76.0, 10115.0], [79.0, 64205.0], [81.0, 7781.0], [80.0, 27715.0], [82.0, 5484.0], [85.0, 8137.0], [84.0, 3363.0], [97.0, 12767.0], [96.0, 57.5], [99.0, 14183.0], [98.0, 11.5], [102.0, 8037.5], [100.0, 7259.0], [104.0, 8041.0], [107.0, 8895.0], [106.0, 10630.5], [105.0, 9646.0], [110.0, 9103.0], [115.0, 7737.0], [113.0, 9210.0], [112.0, 10.0], [118.0, 8985.0], [117.0, 8086.0], [122.0, 7945.0], [120.0, 14313.0], [125.0, 10662.0], [127.0, 34602.5], [132.0, 10399.0], [135.0, 9057.0], [130.0, 10280.0], [131.0, 8119.0], [133.0, 9395.0], [140.0, 8383.0], [143.0, 8433.5], [141.0, 8882.5], [148.0, 13136.0], [145.0, 7519.0], [151.0, 9273.0], [146.0, 10126.0], [147.0, 8101.0], [144.0, 7689.0], [150.0, 8619.5], [154.0, 9101.0], [158.0, 9096.5], [153.0, 25503.0], [155.0, 9072.0], [159.0, 10172.0], [152.0, 32.0], [161.0, 8931.0], [160.0, 9906.0], [166.0, 6083.0], [167.0, 8985.0], [165.0, 5912.5], [164.0, 7926.5], [168.0, 8438.5], [174.0, 8831.5], [169.0, 9381.0], [170.0, 8670.5], [171.0, 9137.0], [172.0, 7848.0], [175.0, 8644.0], [178.0, 9119.5], [179.0, 8846.5], [181.0, 8889.0], [184.0, 9397.0], [189.0, 8818.0], [190.0, 8390.0], [191.0, 8270.0], [195.0, 8892.0], [198.0, 8477.0], [326.0, 14990.0], [1.0, 2731.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 326.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 78547.0, "series": [{"data": [[32.0, 829.5], [2.0, 988.5], [1.0, 934.0], [37.0, 915.0], [19.0, 1027.0], [10.0, 1071.0], [23.0, 1078.0], [6.0, 955.0], [3.0, 950.0], [12.0, 1098.0], [7.0, 1055.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [3.0, 0.0], [4.0, 4978.5], [5.0, 0.0], [6.0, 1245.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 6799.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 4296.5], [17.0, 0.0], [18.0, 17036.5], [19.0, 11240.0], [20.0, 5123.0], [21.0, 34709.0], [22.0, 0.0], [23.0, 0.0], [24.0, 0.0], [25.0, 0.0], [26.0, 0.0], [27.0, 4629.0], [28.0, 26226.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0], [32.0, 0.0], [34.0, 3499.0], [35.0, 5972.0], [37.0, 1223.0], [36.0, 10759.0], [39.0, 0.0], [38.0, 0.0], [40.0, 0.0], [42.0, 0.0], [45.0, 5217.0], [46.0, 4620.0], [48.0, 32660.0], [51.0, 32919.0], [50.0, 0.0], [52.0, 4098.5], [54.0, 7406.5], [55.0, 4462.0], [57.0, 13271.5], [56.0, 12477.0], [59.0, 2407.0], [61.0, 10698.0], [67.0, 10102.5], [64.0, 78547.0], [68.0, 8260.0], [70.0, 9679.5], [69.0, 0.0], [71.0, 5726.0], [72.0, 6258.5], [76.0, 10115.0], [79.0, 64205.0], [81.0, 7780.0], [80.0, 27714.5], [82.0, 5481.0], [85.0, 8137.0], [84.0, 3333.5], [97.0, 12751.0], [96.0, 0.0], [99.0, 14183.0], [98.0, 0.0], [102.0, 8037.5], [100.0, 7259.0], [104.0, 8041.0], [107.0, 8895.0], [106.0, 10630.5], [105.0, 9646.0], [110.0, 9103.0], [115.0, 7737.0], [113.0, 9210.0], [112.0, 0.0], [118.0, 8985.0], [117.0, 8086.0], [122.0, 7945.0], [120.0, 14313.0], [125.0, 10662.0], [127.0, 34602.5], [132.0, 10399.0], [135.0, 9056.0], [130.0, 10280.0], [131.0, 8119.0], [133.0, 9395.0], [140.0, 8383.0], [143.0, 8433.5], [141.0, 8882.5], [148.0, 13135.5], [145.0, 7519.0], [151.0, 9273.0], [146.0, 10126.0], [147.0, 8101.0], [144.0, 7689.0], [150.0, 8619.5], [154.0, 9100.5], [158.0, 9096.5], [153.0, 25493.0], [155.0, 9072.0], [159.0, 10172.0], [152.0, 0.0], [161.0, 8931.0], [160.0, 9906.0], [166.0, 6083.0], [167.0, 8985.0], [165.0, 5912.5], [164.0, 7926.5], [168.0, 8438.5], [174.0, 8831.5], [169.0, 9381.0], [170.0, 8670.5], [171.0, 9137.0], [172.0, 7847.5], [175.0, 8644.0], [178.0, 9119.5], [179.0, 8846.5], [181.0, 8889.0], [184.0, 9397.0], [189.0, 8818.0], [190.0, 8390.0], [191.0, 8270.0], [195.0, 8892.0], [198.0, 8477.0], [326.0, 14990.0], [1.0, 2731.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 326.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.74560094E12, "maxY": 43.11666666666667, "series": [{"data": [[1.74560118E12, 43.11666666666667], [1.74560148E12, 23.116666666666667], [1.745601E12, 39.28333333333333], [1.7456013E12, 31.316666666666666], [1.74560112E12, 41.9], [1.74560142E12, 28.316666666666666], [1.74560094E12, 30.65], [1.74560124E12, 38.75], [1.74560154E12, 0.5333333333333333], [1.74560106E12, 42.05], [1.74560136E12, 14.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74560154E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.74560094E12, "maxY": 23.533333333333335, "series": [{"data": [[1.74560118E12, 22.266666666666666], [1.74560148E12, 23.533333333333335], [1.745601E12, 17.966666666666665], [1.7456013E12, 18.983333333333334], [1.74560112E12, 17.983333333333334], [1.74560142E12, 12.6], [1.74560094E12, 19.116666666666667], [1.74560124E12, 17.033333333333335], [1.74560154E12, 0.9166666666666666], [1.74560106E12, 17.25], [1.74560136E12, 11.533333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.74560118E12, 5.583333333333333], [1.74560148E12, 3.6166666666666667], [1.745601E12, 7.216666666666667], [1.7456013E12, 6.633333333333334], [1.74560112E12, 5.683333333333334], [1.74560142E12, 2.45], [1.74560094E12, 3.7333333333333334], [1.74560124E12, 6.7], [1.74560106E12, 6.683333333333334], [1.74560136E12, 3.15]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.74560118E12, 15.416666666666666], [1.745601E12, 14.483333333333333], [1.7456013E12, 6.333333333333333], [1.74560112E12, 18.05], [1.74560142E12, 15.783333333333333], [1.74560094E12, 0.1], [1.74560124E12, 14.616666666666667], [1.74560106E12, 17.75]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.74560142E12, 0.16666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74560154E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.74560094E12, "maxY": 43.21666666666667, "series": [{"data": [[1.74560118E12, 43.21666666666667], [1.74560148E12, 27.15], [1.745601E12, 39.666666666666664], [1.7456013E12, 31.95], [1.74560112E12, 41.71666666666667], [1.74560142E12, 31.0], [1.74560094E12, 21.016666666666666], [1.74560124E12, 38.35], [1.74560154E12, 0.65], [1.74560106E12, 41.68333333333333], [1.74560136E12, 14.683333333333334]], "isOverall": false, "label": "conf #1 req-failure", "isController": false}, {"data": [[1.74560118E12, 0.05], [1.74560094E12, 1.9333333333333333], [1.74560154E12, 0.26666666666666666]], "isOverall": false, "label": "conf #1 req-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74560154E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.74560094E12, "maxY": 43.21666666666667, "series": [{"data": [[1.74560118E12, 0.05], [1.74560094E12, 1.9333333333333333], [1.74560154E12, 0.26666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74560118E12, 43.21666666666667], [1.74560148E12, 27.15], [1.745601E12, 39.666666666666664], [1.7456013E12, 31.95], [1.74560112E12, 41.71666666666667], [1.74560142E12, 31.0], [1.74560094E12, 21.016666666666666], [1.74560124E12, 38.35], [1.74560154E12, 0.65], [1.74560106E12, 41.68333333333333], [1.74560136E12, 14.683333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74560154E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

